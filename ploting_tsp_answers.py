import matplotlib.pyplot as plt


def plotTSP(path, points, num_iters=1):
    """
    path: List of lists with the different orders in which the nodes are visited
    points: coordinates for the different nodes
    num_iters: number of paths that are in the path list

    """

    # Unpack the primary TSP path and transform it into a list of ordered
    # coordinates

    x = [];
    y = []
    for i in paths[0]:
        x.append(points[i-1][0])
        y.append(points[i-1][1])

    plt.plot(x, y, 'co')

    # Set a scale for the arrow heads (there should be a reasonable default for this, WTF?)
    a_scale = float(max(x)) / float(100)

    # Draw the older paths, if provided
    if num_iters > 1:

        for i in range(1, num_iters):

            # Transform the old paths into a list of coordinates
            xi = [];
            yi = [];
            for j in paths[i]:
                xi.append(points[j][0])
                yi.append(points[j][1])

            plt.arrow(xi[-1], yi[-1], (xi[0] - xi[-1]), (yi[0] - yi[-1]),
                      head_width=a_scale, color='r',
                      length_includes_head=True, ls='dashed',
                      width=0.001 / float(num_iters))
            for i in range(0, len(x) - 1):
                plt.arrow(xi[i], yi[i], (xi[i + 1] - xi[i]), (yi[i + 1] - yi[i]),
                          head_width=a_scale, color='r', length_includes_head=True,
                          ls='dashed', width=0.001 / float(num_iters))

    # Draw the primary path for the TSP problem
    plt.arrow(x[-1], y[-1], (x[0] - x[-1]), (y[0] - y[-1]), head_width=a_scale,
              color='g', length_includes_head=True)
    for i in range(0, len(x) - 1):
        plt.arrow(x[i], y[i], (x[i + 1] - x[i]), (y[i + 1] - y[i]), head_width=a_scale,
                  color='g', length_includes_head=True)

    # Set axis too slitghtly larger than the set of x and y
    plt.xlim(  -60 , max(x) * 1.1)
    plt.ylim(  -180 , max(y) * 1.1)
    plt.show()


if __name__ == '__main__':
    # Run an example

    # Create a randomn list of coordinates, pack them into a list
    x_cor = [68.58, 64.34, 59.55, 59.25, 56.57, 54.43, 54.41, 53.54, 49.5, 50.26, 46.28, 55.45, 56.2, 55.45, 53.12, 51.4, 50.0, 48.27, 44.36, 47.14, 48.44, 46.21, 41.43, 40.11, 40.23, 58.0, 56.51, 67.27, 69.2, 55.0, 55.02, 56.01, 49.5, 43.15, 41.2, 39.4, 38.35, 43.48, 52.16, 47.55, 52.03, 62.13, 64.45, 53.01, 59.34, 50.17, 50.35, 48.27, 46.58, 43.1, 41.01, 38.25, 39.56, 38.43, 39.45, 39.55, 37.55, 37.01, 36.12, 34.44, 33.3, 33.53, 31.57, 32.5, 32.04, 31.46, 24.28, 21.3, 21.27, 15.23, 14.48, 12.45, 14.32, 23.37, 25.18, 25.17, 26.13, 24.38, 29.2, 30.3, 33.21, 35.28, 36.2, 38.05, 37.16, 35.4, 34.19, 30.2, 32.4, 29.36, 30.17, 36.18, 34.2, 31.32, 34.31, 33.36, 31.35, 31.25, 30.11, 30.12, 27.42, 25.22, 24.52, 30.19, 28.4, 26.17, 26.55, 26.28, 25.2, 25.36, 22.32, 23.02, 21.09, 20.3, 18.58, 17.23, 17.42, 15.21, 12.59, 13.05, 10.49, 9.56, 6.56, 27.43, 27.28, 23.43, 22.2, 22.0, 16.47, 18.47, 19.52, 17.58, 21.02, 16.28, 16.04, 10.45, 11.33, 13.45, 5.25, 3.1, 1.17, 3.35, -0.57, -2.55, -6.1, -6.54, -7.48, -7.15, -8.39, -10.1, -3.2, 1.33, 4.56, -0.3, -5.07, 1.29, -3.43, -5.4, 7.04, 10.18, 10.42, 14.35, 22.17, 22.38, 25.03, 29.4, 36.03, 34.15, 30.39, 29.39, 25.05, 23.06, 26.06, 30.36, 32.03, 31.14, 34.48, 36.06, 37.55, 39.08, 39.55, 38.53, 41.48, 45.45, 39.01, 37.33, 35.06, 43.03, 39.43, 38.15, 35.42, 35.1, 36.34, 35.0, 34.4, 34.24, 32.48, 31.36, 26.13, 13.28, -2.32, -4.12, -9.3, -12.28, -31.56, -34.55, -37.49, -42.53, -33.52, -27.28, -19.16, -23.42, -45.52, -43.32, -41.18, -36.52, -21.08, -14.16, -18.08, -22.16, -9.26, -0.32, 11.35, 21.19, 1.52, -9.45, -17.32, -25.04, -27.07]

    y_cor = [33.05, 40.32, 30.15, 24.45, 24.06, 20.3, 25.19, 27.34, 24.0, 30.31, 30.44, 37.35, 44.0, 49.08, 50.09, 39.1, 36.15, 34.59, 33.32, 39.42, 44.25, 48.03, 44.49, 44.3, 49.51, 56.15, 60.36, 63.58, 88.06, 73.24, 82.55, 92.5, 73.1, 76.57, 69.18, 66.48, 68.48, 87.35, 104.2, 106.53, 113.3, 129.49, 177.29, 158.39, 150.48, 127.32, 137.02, 135.06, 142.42, 131.56, 28.58, 27.09, 32.52, 35.3, 37.02, 41.17, 40.14, 35.18, 37.1, 36.43, 36.18, 35.3, 35.56, 35.0, 34.46, 35.14, 39.36, 39.12, 39.49, 44.12, 42.57, 45.12, 49.08, 58.35, 55.18, 51.32, 50.35, 46.43, 47.59, 47.47, 44.25, 44.28, 43.08, 46.18, 49.36, 51.26, 47.04, 48.16, 51.38, 52.32, 57.05, 59.36, 62.12, 65.3, 69.12, 73.04, 74.18, 73.05, 71.29, 67.0, 68.52, 68.22, 67.03, 78.02, 77.13, 73.02, 75.49, 80.21, 83.0, 85.07, 88.22, 72.37, 79.06, 85.5, 72.5, 78.29, 83.18, 75.1, 77.35, 80.17, 78.41, 78.07, 79.51, 85.19, 89.39, 90.25, 91.5, 96.05, 96.1, 98.59, 102.08, 102.36, 105.51, 107.36, 108.13, 106.4, 104.55, 100.31, 100.2, 101.42, 103.51, 98.4, 100.21, 104.45, 106.48, 107.36, 110.22, 112.45, 115.13, 123.35, 114.35, 110.2, 114.55, 117.09, 119.24, 124.51, 128.12, 132.45, 125.36, 123.54, 122.34, 121.0, 114.09, 120.17, 121.3, 91.09, 103.41, 108.52, 104.04, 106.34, 102.4, 113.16, 119.17, 114.17, 118.47, 121.28, 113.39, 120.19, 112.3, 117.12, 116.25, 121.35, 123.27, 126.41, 125.45, 126.58, 129.03, 141.21, 140.07, 140.53, 139.46, 136.55, 136.39, 135.45, 135.3, 132.27, 129.55, 130.33, 127.4, 144.47, 140.42, 152.12, 147.1, 130.5, 115.5, 138.35, 144.58, 147.19, 151.13, 153.02, 146.48, 133.53, 170.3, 172.38, 174.47, 174.46, -175.12, -170.42, 178.25, 166.27, 159.57, 166.55, 165.23, -157.52, -157.2, -139.0, -149.34, -130.06, -109.22]

    points = []
    for i in range(0, len(x_cor)):
        points.append((x_cor[i], y_cor[i]))

    # Create two paths, teh second with two values swapped to simulate a 2-OPT
    # Local Search operation
    path1 = [1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 16, 17, 18, 20, 21, 22, 19, 23, 24, 25, 34, 35, 36, 37, 38, 40, 41, 39, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 63, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 88, 90, 91, 94, 96, 95, 93, 92, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 129, 130, 131, 132, 134, 135, 138, 137, 136, 139, 140, 142, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 152, 153, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 211, 212, 210, 209, 206, 205, 207, 208, 213, 214, 215, 216, 220, 217, 219, 218, 221, 226, 227, 228, 229, 222, 225, 223, 224, 190, 189, 188, 184, 183, 168, 167, 173, 171, 172, 157, 158, 155, 133, 128, 127, 126, 125, 124, 105, 104, 73, 71, 70, 72, 52, 45, 42, 43, 32, 31, 30, 27, 26, 28, 29, 33, 15, 14, 13, 12]

    path2 = [216, 217, 226, 227, 228, 67, 68, 75, 74, 110, 126, 128, 142, 143, 144, 148, 211, 208, 209, 219, 218, 220,
             210, 202, 157, 155, 153, 152, 137, 127, 125,
             100, 99, 36, 35, 34, 32, 29, 33, 123, 109, 118, 121, 122, 120, 119,
             116, 108, 107, 104, 103, 96, 94, 21, 20, 18, 10, 9, 7, 17, 16, 13, 14, 80, 69, 70, 71, 72, 173, 194, 193,
             187, 48, 46, 47, 49, 45, 183, 181, 177, 175, 179,
             180, 178, 166, 168, 170, 140, 145, 146, 147, 150, 160, 162, 171, 27, 26, 25, 51, 225, 224, 223, 5, 6, 3, 4,
             8, 50, 64,
             63, 62, 77, 76, 89, 78, 79, 87, 81, 82, 56, 58, 59, 61, 60, 55, 23, 83, 85, 90, 102, 101, 111, 105, 98, 97,
             95, 93, 91, 24, 84, 86, 88, 73, 114,
             115, 117, 66, 65, 57, 52, 53, 54, 19, 12, 1, 0, 2, 11, 15, 22, 92, 106, 112, 113, 124, 165, 37, 30, 28, 31,
             38, 39, 196,
             197, 198, 164, 172, 163, 156, 203, 149, 154, 131, 130, 132, 134, 133, 139, 141, 138, 129, 169, 167, 176,
             174,
             161, 206, 207, 212, 213, 222, 190, 192, 191, 199, 201, 200, 158, 159, 135,
             136, 151, 204, 205, 214, 215, 221, 195, 186, 185, 184, 182, 188, 189, 43, 42, 44, 41, 40]
    path3 = [216, 217, 226, 227, 228, 67, 68, 75, 74, 110, 126, 128, 142, 143, 144, 148, 211, 208, 209, 219, 218, 220,
             210, 202, 157, 155, 153, 152, 137, 127, 125,
             100, 99, 36, 35, 34, 32, 29, 33, 123, 109, 118, 121, 122, 120, 119,
             116, 108, 107, 104, 103, 96, 94, 21, 20, 18, 10, 9, 7, 17, 16, 13, 14, 80, 69, 70, 71, 72, 173, 194, 193,
             187, 48, 46, 47, 49, 45, 183, 181, 177, 175, 179,
             180, 178, 166, 168, 170, 140, 145, 146, 147, 150, 160, 162, 171, 27, 26, 25, 51, 225, 224, 223, 5, 6, 3, 4,
             8, 50, 64,
             63, 62, 77, 76, 89, 78, 79, 87, 81, 82, 56, 58, 59, 61, 60, 55, 23, 83, 85, 90, 102, 101, 111, 105, 98, 97,
             95, 93, 91, 24, 84, 86, 88, 73, 114,
             115, 117, 66, 65, 57, 52, 53, 54, 19, 12, 1, 0, 2, 11, 15, 22, 92, 106, 112, 113, 124, 165, 37, 30, 28, 31,
             38, 39, 196,
             197, 198, 164, 172, 163, 156, 203, 149, 154, 131, 130, 132, 134, 133, 139, 141, 138, 129, 169, 167, 176,
             174,
             161, 206, 207, 212, 213, 222, 190, 192, 191, 199, 201, 200, 158, 159, 135,
             136, 151, 204, 205, 214, 215, 221, 195, 186, 185, 184, 182, 188, 189, 43, 42, 44, 41, 40]
    path4 = [216, 217, 226, 227, 228, 67, 68, 75, 74, 110, 126, 128, 142, 143, 144, 148, 211, 208, 209, 219, 218, 220,
             210, 202, 157, 155, 153, 152, 137, 127, 125,
             100, 99, 36, 35, 34, 32, 29, 33, 123, 109, 118, 121, 122, 120, 119,
             116, 108, 107, 104, 103, 96, 94, 21, 20, 18, 10, 9, 7, 17, 16, 13, 14, 80, 69, 70, 71, 72, 173, 194, 193,
             187, 48, 46, 47, 49, 45, 183, 181, 177, 175, 179,
             180, 178, 166, 168, 170, 140, 145, 146, 147, 150, 160, 162, 171, 27, 26, 25, 51, 225, 224, 223, 5, 6, 3, 4,
             8, 50, 64,
             63, 62, 77, 76, 89, 78, 79, 87, 81, 82, 56, 58, 59, 61, 60, 55, 23, 83, 85, 90, 102, 101, 111, 105, 98, 97,
             95, 93, 91, 24, 84, 86, 88, 73, 114,
             115, 117, 66, 65, 57, 52, 53, 54, 19, 12, 1, 0, 2, 11, 15, 22, 92, 106, 112, 113, 124, 165, 37, 30, 28, 31,
             38, 39, 196,
             197, 198, 164, 172, 163, 156, 203, 149, 154, 131, 130, 132, 134, 133, 139, 141, 138, 129, 169, 167, 176,
             174,
             161, 206, 207, 212, 213, 222, 190, 192, 191, 199, 201, 200, 158, 159, 135,
             136, 151, 204, 205, 214, 215, 221, 195, 186, 185, 184, 182, 188, 189, 43, 42, 44, 41, 40]

    # Pack the paths into a list
    paths = [path1]

    # Run the function
    plotTSP(paths, points, 1)